from vpython import * 
from pypylon import pylon
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib import style
from matplotlib.ticker import FormatStrFormatter
import time
from openpyxl import Workbook
import xlwt
from datetime import datetime
import random
from itertools import count
from IPython.display import display, clear_output
from matplotlib.animation import FuncAnimation
from drawnow import drawnow
from bokeh.plotting import curdoc, figure
import plotly.express as px
import plotly.graph_objs as go
import pandas as pd
import numpy.ma as ma
import math
import time
%matplotlib inline 



# conecting to the first available camera
camera = pylon.InstantCamera(pylon.TlFactory.GetInstance().CreateFirstDevice())

# Grabing Continusely (video) with minimal delay
camera.StartGrabbing(pylon.GrabStrategy_LatestImageOnly) 
converter = pylon.ImageFormatConverter()

# converting to opencv bgr format
converter.OutputPixelFormat = pylon.PixelType_BGR8packed
converter.OutputBitAlignment = pylon.OutputBitAlignment_MsbAligned

# def for circle shape detection
prevCircle = None
dist = lambda x1,y1,x2,y2: (x1-x2)**2+(y1-y2)**2
x = np.empty(1)
y = np.empty(1)

#graph
fig = plt.figure()
ax = fig.add_subplot(111)
ax.set_xlim(4096)
ax.set_ylim(2168)

#def for background change to black and white
object_detector = cv.createBackgroundSubtractorMOG2(history=100, varThreshold=70)

#def for set time counter 
t = 0
tmax = 3600
dt = 1

#display 
scene1 = canvas()

#measure the time
st = time.time()
#Camera grabbing while loop and set count time 
while camera.IsGrabbing() and t < tmax:
    grabResult = camera.RetrieveResult(5000, pylon.TimeoutHandling_ThrowException)
    if grabResult.GrabSucceeded():
        # Access the image data
        image = converter.Convert(grabResult)
        img = image.GetArray()
    if not grabResult.GrabSucceeded: break
    
#Frame color control 
    GrayFrame = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
    blurFrame = cv.GaussianBlur(GrayFrame, (17,17),0)
    thresh = cv.threshold(blurFrame, 35, 255, cv.THRESH_BINARY)[1]
    
    #detect things without dark room used to use imc
    circles = cv.HoughCircles(thresh, cv.HOUGH_GRADIENT, 1, 5000, param1=250, param2=13, minRadius=75, maxRadius=125)
    if circles is not None:
        for i in circles[0, :]:
            x = np.append(x , i[0])
            y = np.append(y , i[1])
            center = np.uint16(np.around((i[0], i[1])))
            # circle center
            cv.circle(img, center, 1, (0, 100, 100), 3)
            # circle outline
            radius = np.uint16(np.around(i[2]))
            cv.circle(img, center, radius, (0, 255, 0), 3)
            
            #graph section
            sct = ax.scatter(x*0.2645833333, y*0.2645833333, marker='x') 
            sct.set_offsets(np.c_[x,y])
            plt.title("Real Time plot")
            plt.xlabel("x")
            plt.ylabel("y")
            
            clear_output(wait=True)
            

            #data
            xs = x[1:]
            ys = y[1:]
            max_value_x = np.max(xs)
            max_value_y = np.max(ys)
          

            min_value_x = np.min(xs)
            min_value_y = np.min(ys)
            
            R_x = (max_value_x-min_value_x)/2
            R_y = (max_value_y-min_value_y)/2
            Area_E = R_x*R_y*3.14
            
            scene2 = canvas()
            data = {
                'original_pos_xy':[(x[1]*0.01375, y[1]*0.01375)],
                'Final_pos_xy': [(x[-1:]*0.01375, y[-1:]*0.01375)],
                'max_xy': [(max_value_x*0.01375,max_value_y*0.01375)],
                'min_xy': [(min_value_x*0.01375,min_value_y*0.01375)],
                'Radius_x':[R_x*0.01375],
                'Radius_y':[R_y*0.01375],
                'Area':[(Area_E*0.01375)],
            }
    
# create dataframe from data
            df1 = pd.DataFrame(data)
            
# display the dataframe
            display(df1,fig)
            
#out put section for output the coordinate and video
    cv.imshow("live video", img)
    cv.imshow("detection", thresh)
    
#picture detacting watiing section
    key = cv.waitKey(30) 
    if key == 27 : break
    #count time 
    t = t + dt


  
#camera control         
camera.StopGrabbing()
cv.destroyAllWindows()
            
